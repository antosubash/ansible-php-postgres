---
- hosts: controller
  connection: local
  become: true
  vars_files:
    - vars/default.yml
  tasks:
    - name: Install Packages
      apt: 
        update_cache: yes
        state: latest
        pkg:
        - 'aptitude'
        - 'apache2'
        - 'php'
        - 'libapache2-mod-php'
        - 'postgresql'
        - 'postgresql-contrib'
        - 'libpq-dev'
        - 'python-psycopg2'
        - 'bash'
        - 'openssl'
        - 'libssl-doc'

    - name: Create document root
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        owner: "{{ app_user }}"
        mode: '0755'

    - name: Copy index test page
      template:
        src: "files/index.html.j2"
        dest: "/var/www/{{ http_host }}/index.html"

    - name: Set up Apache Virtual host
      template:
        src: "files/apache.conf.j2"
        dest: "/etc/apache2/sites-available/{{ http_conf }}"

    - name: Enable new site
      shell: /usr/sbin/a2ensite {{ http_conf }}
      notify: Reload Apache

    - name: Disable default Apache site
      shell: /usr/sbin/a2dissite 000-default.conf
      when: disable_default
      notify: Reload Apache

    - name: "UFW - Allow HTTP on port {{ http_port }}"
      ufw:
        rule: allow
        port: "{{ http_port }}"
        proto: tcp

    - name: Sets Up PHP Info Page
      template:
        src: "files/info.php.j2"
        dest: "/var/www/{{ http_host }}/info.php"

    - name: Ensure the PostgreSQL service is running
      service: 
        name: postgresql 
        state: started 
        enabled: yes

    - name: Create a new database with name 
      become_user: postgres
      become_exe: sudo
      community.general.postgresql_db:
        name: "{{ db_name }}"
        state: present

    - name: Create user with password
      become_user: postgres
      become_exe: sudo   
      community.general.postgresql_user:
        db: "{{ db_name }}" 
        name: "{{db_user}}" 
        password: "{{ db_password }}" 
        priv: all

    - name: remove unnecessary privilege
      become_user: postgres
      become_exe: sudo      
      community.general.postgresql_user:
        name: "{{ db_user }}" 
        role_attr_flags: NOSUPERUSER,NOCREATEDB
  
    - name: ensure no other user can access the database
      become_user: postgres
      become_exe: sudo     
      community.general.postgresql_privs: 
        db: "{{ db_name }}" 
        role: PUBLIC 
        type: database 
        priv: ALL 
        state: absent

    - name: Simple select query to {{ db_name }} db
      become_user: postgres
      become_exe: sudo  
      community.general.postgresql_query:
        db: "{{ db_name }}"
        query: SELECT version()

  handlers:
    - name: Reload Apache
      ansible.builtin.service:
        name: apache2
        state: reloaded

    - name: Restart Apache
      ansible.builtin.service:
        name: apache2
        state: restarted
